{"version":3,"sources":["util/API.js","components/ImageBox/index.js","components/Container/index.js","components/Form/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["API","search","query","axios","get","concat","ImageBox","props","_useState","useState","_useState2","Object","slicedToArray","animated","setAnimation","_useState3","_useState4","titleLong","setTitle","react_default","a","createElement","className","longTitle","shortTitle","alt","data-animated","dataAnimated","data-still","dataStill","src","onClick","e","onMouseEnter","onMouseLeave","Container","id","data","map","img","components_ImageBox","key","title","images","url","downsized_medium","replace","toUpperCase","length","substring","Form","type","value","val","onChange","inputChange","submitInput","Title","Fragment","App","q","setQ","animalz","setAnimals","components_Title","components_Form","target","then","response","animals","console","log","catch","err","components_Container","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1d6cc90.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n  search: function(query) {\n    return axios.get(\n      `https://api.giphy.com/v1/gifs/search?api_key=garZqKF43Z1oYqEuQRR2Nr300rHn2n9r&q=${query}&limit=10&offset=0&rating=G&lang=en`\n    );\n  }\n};\n","import React, { useState } from \"react\";\n\nconst ImageBox = props => {\n  const [animated, setAnimation] = useState(false);\n  const [titleLong, setTitle] = useState(false);\n\n  const hoverOnHandler = () => {\n    setTitle(true);\n  };\n\n  const hoverOffHandler = () => {\n    setTitle(false);\n  };\n\n  return (\n    <div className='picBox'>\n      <p>{titleLong ? props.longTitle : props.shortTitle}</p>\n      <img\n        className='img'\n        alt={props.alt}\n        data-animated={props.dataAnimated}\n        data-still={props.dataStill}\n        src={animated ? props.dataAnimated : props.dataStill}\n        onClick={e => setAnimation(!animated)}\n        onMouseEnter={e => hoverOnHandler()}\n        onMouseLeave={e => hoverOffHandler()}\n      />\n    </div>\n  );\n};\n\nexport default ImageBox;\n","import React from \"react\";\n\nimport ImageBox from \"../ImageBox\";\n\nconst Container = props => {\n  const shortenTitle = title => {\n    if (title.length > 12) {\n      title = title.substring(0, 11) + \"...\";\n    }\n    return title;\n  };\n\n  return (\n    <div id='picContainer'>\n      {props.data\n        ? props.data.map(img => {\n            return (\n              <ImageBox\n                className='img'\n                key={img.id}\n                alt={img.title}\n                dataStill={img.images[\"480w_still\"].url}\n                dataAnimated={img.images.downsized_medium.url}\n                shortTitle={\n                  img.title\n                    ? shortenTitle(img.title.replace(\"GIF\", \"\").toUpperCase())\n                    : \"GIF\"\n                }\n                longTitle={\n                  img.title ? img.title.replace(\"GIF\", \"\").toUpperCase() : \"GIF\"\n                }\n              />\n            );\n          })\n        : null}\n    </div>\n  );\n};\n\nexport default Container;\n","import React from \"react\";\n\nconst Form = props => {\n  return (\n    <div className='form'>\n      <input\n        className='input'\n        type='text'\n        value={props.val}\n        onChange={props.inputChange}\n      />\n      <button className='input' type='submit' onClick={props.submitInput}>\n        Submit\n      </button>\n    </div>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\n\nconst Title = props => {\n  return (\n    <>\n      <h1>React Giphy Search</h1>\n      <h4>Click the image to see it come to life!</h4>\n    </>\n  );\n};\n\nexport default Title;\n","import React, { useState } from \"react\";\n\nimport API from \"./util/API.js\";\n\nimport Container from \"./components/Container\";\nimport Form from \"./components/Form\";\nimport Title from \"./components/Title\";\n\nfunction App() {\n  const [q, setQ] = useState(\"\");\n  const [animalz, setAnimals] = useState();\n\n  const handleFormChange = e => {\n    let query = e.target.value;\n    setQ(query);\n  };\n\n  const handleFormSubmit = props => {\n    API.search(q)\n      .then(response => {\n        const animals = response.data.data;\n        console.log(animals);\n        setAnimals(animals);\n        setQ(\"\");\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <div className='App'>\n      <Title />\n      <Form\n        val={q}\n        inputChange={handleFormChange}\n        submitInput={handleFormSubmit}\n      />\n      <Container data={animalz} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}